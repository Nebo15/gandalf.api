{
  "swagger": "2.0",
  "info": {
    "title": "Gandalf API",
    "description": "`Gandalf` is a **Open-Source** Decision Engine for Big-Data. \n\nYou can find source code on our [GitHub account](https://github.com/Nebo15/gandalf.api/). Itâ€™s build on top of PHP Lumen framework and MongoDB.",
    "version": "1.0.0"
  },
  "host": "gandalf-api.nebo15.com",
  "schemes": [
    "http"
  ],
  "basePath": "/api/v1",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication."
    },
    "basicConsumer": {
      "type": "basic",
      "description": "HTTP Basic Consumer Authentication."
    },
    "oauth2": {
      "type": "oauth2",
      "description": "Oauth"
    }
  },
  "paths": {
    "/users/": {
      "post": {
        "summary": "Create new User",
        "description": "Create new application user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "email",
                "password"
              ],
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "User first name",
                  "example": "John",
                  "required": false
                },
                "last_name": {
                  "type": "string",
                  "description": "User last name",
                  "example": "Tester",
                  "required": false
                },
                "email": {
                  "type": "string",
                  "description": "User email",
                  "example": "test@site.com",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "description": "User password",
                  "example": "p@ssword!1!",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/User",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List of Users",
        "description": "Get list of users with pagging and live search",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "request",
            "description": "Parameter searching users by usernames or emails. If name == jo, in the response users will be with usernames which starts on jo, Jo, JO. Searching by email enabled just when parameter has @",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "request",
            "description": "Amount of Tables on page",
            "required": false
          },
          {
            "name": "page",
            "in": "request",
            "description": "Page for pagination",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List found users",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data",
                "paging"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserInList"
                  },
                  "description": "Response data object"
                },
                "paging": {
                  "$ref": "#/definitions/Paging",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "summary": "Info about current user",
        "description": "Get info about current user",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  },
                  "description": "Response data object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user info and personal data",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "email",
                "password"
              ],
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "User first name",
                  "example": "John",
                  "required": false
                },
                "last_name": {
                  "type": "string",
                  "description": "User last name",
                  "example": "Tester",
                  "required": false
                },
                "email": {
                  "type": "string",
                  "description": "User email",
                  "example": "test@site.com",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "description": "User password",
                  "example": "p@ssword!1!",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/User",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/users/password/reset" : {
      "post" : {
        "summary": "Reset password",
        "description": "Get reset password token",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email for reset get reset password token",
                  "example": "email@example.com",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary": "Change password action",
        "description": "Change user password by token",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "Token for verification email",
                  "example": "$2y$10$.lp0OGb.nJStTuwdi40wsOM7BQcukideddsiM1hFOXH5/J9sI628C",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "description": "New user password",
                  "example": "password123",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/User",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify/email" : {
      "post" : {
        "summary": "Verify user email",
        "description": "New user should verify email",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "Token for verification email",
                  "example": "$2y$10$.lp0OGb.nJStTuwdi40wsOM7BQcukideddsiM1hFOXH5/J9sI628C",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/User",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/invite": {
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Invite user to the project",
        "description": "Invitaion user to project",
        "tags": [
          "Project",
          "User"
        ],
        "parameters": [
          {
            "name": "email",
            "description": "Email for invitation",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "description": "Role of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Scopes of consumer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/InvitationUser",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/": {
      "post": {
        "summary": "Get user access token",
        "description": "Get user access token, grant_type password scenario <br/>**Every request should be with Access Token**<br/>**-H 'Authorization: token_type access_token_here'**",
        "tags": [
          "User"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "description": "Grant Type",
            "required": true,
            "type": "string",
            "enum": [
              "password",
              "refresh_token"
            ]
          },
          {
            "name": "username",
            "description": "Username or user email, required if grant_type == password",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "User password, required if grant_type == password",
            "required": false,
            "type": "string"
          },
          {
            "name": "refresh_token",
            "description": "Refresh token, required if grant_type == refresh_token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token object",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AccessToken",
              "description": "Response data object"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/projects/current": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get current project",
        "description": "Get info about current project",
        "tags": [
          "Project"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/projects/": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get list of projects",
        "description": "Get list of projects for current user",
        "tags": [
          "Project"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Projects Objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  },
                  "description": "Response data object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Create project",
        "description": "Can create project and in the feature link tables to it.<br/> When you created project, your feature requests should be with Header <br />**-H 'X-Application: project_id'**",
        "tags": [
          "Project"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "description": "Title of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Description of the project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Update project",
        "description": "Can update project",
        "tags": [
          "Project"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "description": "Title of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Description of the project",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Delete project",
        "description": "***WARNING!!!*** This method will delete all Tables and Groups which connected to the project",
        "tags": [
          "Project"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Projects Objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  },
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/projects/consumers": {
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Create consumer",
        "description": "Every into existing project user can create consumer with own scopes. <br/>For login as consumer you should make Basic Auth client_id:client_secret",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "description",
            "description": "Description of consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Scopes of consumer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "$ref": "#/definitions/Project",
              "description": "Response data object"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Update consumer",
        "description": "Update description or scopes of consumer, by client_id",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "client_id",
            "description": "Client_id from consumer info",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Description of consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Scopes of consumer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Delete consumer",
        "description": "Remove consumer from the project by client_id",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "client_id",
            "description": "Client id of your consumer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/projects/users": {
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Add User to the Project",
        "description": "Adding existing user to the current project. Share project with other users with different scopes",
        "tags": [
          "Project",
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "description": "Id of existing user",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "description": "Role of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Scopes of consumer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Update user into Project",
        "description": "Updating existing user into project.",
        "tags": [
          "Project"
        ],
        "parameters": [
          {
            "name": "user_id",
            "description": "Id of existing user",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "description": "Role of user",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "Scopes of consumer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Get Current user info",
        "description": "Get info about current user",
        "tags": [
          "Project",
          "User"
        ],
        "responses": {
          "200": {
            "description": "Applicationable user object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "description": "Response data object",
                  "$ref": "#/definitions/ProjectUser"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Remove user from project",
        "description": "Adding existing user to the current project. Share project with other users with different scopes",
        "tags": [
          "Project",
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "description": "Id of existing user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project Object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Project",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/tables": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Tables List",
        "description": "Get list of Tables\n",
        "tags": [
          "Admin",
          "Tables"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "request",
            "description": "Amount of Tables on page",
            "required": false
          },
          {
            "name": "page",
            "in": "request",
            "description": "Page for pagination",
            "required": false
          },
          {
            "name": "title",
            "in": "request",
            "description": "Filter by Table.title",
            "required": false
          },
          {
            "name": "description",
            "in": "request",
            "description": "Filter by Table.description",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tables",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/TableList"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Create",
        "description": "###Create a new Table.\nAvailable rules are: \n* `$is_set` - field key exists in request and its value can be any\n* `$is_null` - **(null)** value must be NULL\n* `$eq` - **(string, numeric, boolean)** value must be EQUAL to the condition value\n* `$ne` - **(string, numeric, boolean)** value must be NOT EQUAL to the condition value\n* `$gt` - **(numeric)** value must be GREATER THAN condition value\n* `$gte` - **(numeric)** value must be GREATER THAN OR EQUAL to condition value\n* `$lt` - **(numeric)** value must be LESS THAN to condition value\n* `$lte` - **(numeric)** value must be LESS THAN OR EQUAL to condition value\n* `$between` - **(numeric)** value must be in range of condition value. Condition value must be separated by semicolon: *12,3;30* \n* `$in` - **(string, numeric)** value must be one of the following in condition value. Condition value must be separated by comma: *10.8,'hello world'*\n* `$nin` - **(string, numeric)** value must NOT be one of the following in condition value. Condition value must be separated by comma: *10.8,'hello world'*\n",
        "tags": [
          "Admin",
          "Tables"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Table object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "_id",
                "title",
                "description",
                "matching_type",
                "default_decision",
                "default_title",
                "default_description",
                "variants",
                "fields"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of Table.",
                  "example": "Some title"
                },
                "description": {
                  "type": "string",
                  "description": "Description of Table.",
                  "example": "Some description"
                },
                "matching_type": {
                  "type": "string",
                  "description": "Matching type for Table.",
                  "example": "decision",
                  "enum": [
                    "decision",
                    "scoring"
                  ]
                },
                "default_decision": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
                  "example": "Decline"
                },
                "default_title": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this title will be set for Decision.",
                  "example": "Default title"
                },
                "default_description": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this description will be set for Decision.",
                  "example": "Default description"
                },
                "fields": {
                  "type": "array",
                  "description": "Array of Field objects.",
                  "items": {
                    "$ref": "#/definitions/Field"
                  }
                },
                "variants": {
                  "type": "array",
                  "description": "Array of Rule objects.",
                  "items": {
                    "$ref": "#/definitions/Variant"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Table",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Table"
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Read",
        "description": "Get Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "description": "Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Update",
        "description": "Update Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "description": "Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Delete",
        "description": "Delete Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}/copy": {
      "post": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Copy",
        "description": "Create new Table from existing Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}/analytics": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Table Analytics",
        "description": "Get Table analytics by all made Decisions",
        "tags": [
          "Admin",
          "Tables",
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Table object with matched probabilities and requests amount for each condition",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/TableWithAnalytics",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/decisions": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Decisions List",
        "description": "Get list of Decision objects",
        "tags": [
          "Decision",
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Array of Decision objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/Decision"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/decisions/{id}": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "summary": "Decision Read",
        "description": "Get Decision by id",
        "tags": [
          "Decision",
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Decision object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Decision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/tables": {
      "get": {
        "summary": "Changelog Tables List",
        "description": "Get list of all Changelog Tables",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/ChangelogTablesList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/tables/{id}": {
      "get": {
        "summary": "Changelog by Table",
        "description": "Get Changelog by specific Table",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/ChangelogTablesList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/table/{id}/diff": {
      "get": {
        "summary": "Changelog Tables Diff",
        "description": "View changes between two Tables.",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "parameters": [
          {
            "name": "compare_with",
            "in": "request",
            "description": "Changelog ID. View changes relative from current (if not passed `original` parameter) Table state to passed Table state",
            "required": true
          },
          {
            "name": "original",
            "in": "request",
            "description": "Changelog ID. Set Table state, that will be compared with `compare_with` Table state",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Changelog Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "object",
                  "description": "Response data object",
                  "properties": {
                    "original": {
                      "$ref": "#/definitions/ChangelogTablesDiff"
                    },
                    "compare_with": {
                      "$ref": "#/definitions/ChangelogTablesDiff"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "admin/changelog/tables/{table_id}/rollback/{changelog_id}": {
      "get": {
        "summary": "Changelog Table Rollback",
        "description": "Rollback Table to some state that described in passed Changelog",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "object",
                  "description": "Response data object",
                  "properties": {
                    "reverted": {
                      "$ref": "#/definitions/Table"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tables/{id}/decisions": {
      "post": {
        "summary": "Decision Make",
        "description": "Making Decision from Table",
        "tags": [
          "Consumer"
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/ConsumerDecision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Table": {
      "title": {
        "type": "string",
        "description": "Title of Table.",
        "example": "Some title"
      },
      "description": {
        "type": "string",
        "description": "Description of Table.",
        "example": "Some description"
      },
      "matching_type": {
        "type": "string",
        "description": "Matching type for Table.",
        "example": "decision",
        "enum": [
          "decision",
          "scoring"
        ]
      },
      "default_decision": {
        "type": "string",
        "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
        "example": "Decline"
      },
      "default_title": {
        "type": "string",
        "description": "If there are no rows with all validations passed, this title will be set for Decision.",
        "example": "Default title"
      },
      "default_description": {
        "type": "string",
        "description": "If there are no rows with all validations passed, this description will be set for Decision.",
        "example": "Default description"
      },
      "fields": {
        "type": "array",
        "description": "Array of Field objects.",
        "items": {
          "$ref": "#/definitions/Field"
        }
      },
      "variants": {
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      }
    }
  },
  "definitions": {
    "Meta": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "HTTP response code",
          "example": 200
        }
      }
    },
    "TableList": {
      "type": "object",
      "description": "Short view of Table for list",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "decision",
          "enum": [
            "decision",
            "scoring"
          ]
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        }
      }
    },
    "Table": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision",
        "default_title",
        "default_description",
        "variants",
        "fields"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "decision",
          "enum": [
            "decision",
            "scoring"
          ]
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "variants": {
          "type": "array",
          "description": "Array of Variant objects.",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        }
      }
    },
    "TableWithAnalytics": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision",
        "default_title",
        "default_description",
        "variants",
        "fields"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "decision",
          "enum": [
            "decision",
            "scoring"
          ]
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        },
        "default_title": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this title will be set for Decision.",
          "example": "Default title"
        },
        "default_description": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this description will be set for Decision.",
          "example": "Default description"
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "variants": {
          "type": "array",
          "description": "Array of Rule objects with analytics data.",
          "items": {
            "$ref": "#/definitions/VariantAnalytics"
          }
        }
      }
    },
    "ChangelogTablesList": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "author",
        "model",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "author": {
          "type": "string",
          "description": "Author of changes of the current model.",
          "example": "Admin"
        },
        "model": {
          "type": "object",
          "description": "Information about Table.",
          "required": [
            "_id",
            "table"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "Model ID",
              "example": "56f3e34b4db07f8226010d65"
            },
            "table": {
              "type": "string",
              "description": "Model table name",
              "example": "tables"
            }
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "ChangelogTablesDiff": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "author",
        "model",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "author": {
          "type": "string",
          "description": "Author of changes of the current model.",
          "example": "Admin"
        },
        "model": {
          "type": "object",
          "description": "Information about Table.",
          "required": [
            "_id",
            "table"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "Model ID",
              "example": "56f3e34b4db07f8226010d65"
            },
            "table": {
              "type": "string",
              "description": "Model table name",
              "example": "tables"
            },
            "attributes": {
              "type": "object",
              "description": "All Table attributes, with Embed IDs",
              "$ref": "#/definitions/Table"
            }
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "Field": {
      "type": "object",
      "required": [
        "key",
        "title",
        "source",
        "type"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "API Field for request",
          "example": "salary"
        },
        "title": {
          "type": "string",
          "description": "Field title",
          "example": "Field title"
        },
        "source": {
          "type": "string",
          "description": "Source type.",
          "example": "request",
          "enum": [
            "request"
          ]
        },
        "type": {
          "type": "string",
          "description": "Available field data types",
          "example": "string",
          "enum": [
            "numeric",
            "boolean",
            "string"
          ]
        },
        "preset": {
          "description": "Preset object. You can modify field value for table rows by adding field preset.",
          "$ref": "#/definitions/Preset"
        }
      }
    },
    "Preset": {
      "type": "object",
      "required": [
        "condition",
        "value"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "description": "Available rules",
          "example": "$gte",
          "enum": [
            "$is_set",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        }
      }
    },
    "Variant": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Variant. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        },
        "default_title": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this title will be set for Decision.",
          "example": "Default title"
        },
        "default_description": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this description will be set for Decision.",
          "example": "Default description"
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      }
    },
    "Rule": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects",
          "items": {
            "$ref": "#/definitions/Condition"
          }
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$eq",
          "enum": [
            "$is_set",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        }
      }
    },
    "VariantAnalytics": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Variant. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        },
        "default_title": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this title will be set for Decision.",
          "example": "Default title"
        },
        "default_description": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this description will be set for Decision.",
          "example": "Default description"
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects",
          "items": {
            "$ref": "#/definitions/RuleAnalytics"
          }
        }
      }
    },
    "RuleAnalytics": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects with analytics data",
          "items": {
            "$ref": "#/definitions/ConditionAnalytics"
          }
        }
      }
    },
    "ConditionAnalytics": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value",
        "probability",
        "requests"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$lte",
          "enum": [
            "$is_set",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        },
        "probability": {
          "type": "numeric",
          "description": "Probability value between 0-1, where 1 is 100% matched result",
          "example": 0.67
        },
        "requests": {
          "type": "numeric",
          "description": "Requests amount for current condition.",
          "example": 213
        }
      }
    },
    "Decision": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of the matched rule or Table.default_title.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of the matched rule or Table.default_description.",
          "example": "Some description"
        },
        "request": {
          "type": "object",
          "description": "All passed parameters from request",
          "example": {
            "salary": 1000
          }
        },
        "table": {
          "type": "object",
          "description": "Short Table object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Table ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Matched Rule.title if no one rules is matched Table.default_title.",
              "example": "Table default_title"
            },
            "description": {
              "type": "string",
              "description": "Matched Rule.description or if no one rules is matched - Table.default_description.",
              "example": "Table default_description"
            },
            "matching_type": {
              "type": "string",
              "description": "Matched_type rule. The same as in Table.matching_type.",
              "example": "decision"
            }
          }
        },
        "group": {
          "type": "object",
          "description": "Short Group object. May be null if decision was made not from Group",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Group ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Group title",
              "example": "Group.title value"
            },
            "description": {
              "type": "string",
              "description": "Group description.",
              "example": "Group.description value"
            }
          }
        },
        "final_decision": {
          "type": "string|integer",
          "description": "Depends of the Table.matching_type could be as highest row in a table with all validations passed or sum of scoring points",
          "example": "Approve"
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/DecisionRule"
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "DecisionRule": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "decision": {
          "type": "string|integer|null",
          "description": "Current decision for this rule. If not matched - null",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects",
          "items": {
            "$ref": "#/definitions/DecisionCondition"
          }
        }
      }
    },
    "DecisionCondition": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$eq",
          "enum": [
            "$is_set",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        },
        "matched": {
          "type": "boolean",
          "description": "Is current condition matched",
          "example": true
        }
      }
    },
    "ConsumerDecision": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of the matched rule or Table.default_title.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of the matched rule or Table.default_description.",
          "example": "Some description"
        },
        "request": {
          "type": "object",
          "description": "All passed parameters from request",
          "example": {
            "salary": 1000
          }
        },
        "table": {
          "type": "object",
          "description": "Short Table object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Table ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Matched Rule.title if no one rules is matched Table.default_title.",
              "example": "Table default_title"
            },
            "description": {
              "type": "string",
              "description": "Matched Rule.description or if no one rules is matched - Table.default_description.",
              "example": "Table default_description"
            },
            "matching_type": {
              "type": "string",
              "description": "Matched_type rule. The same as in Table.matching_type.",
              "example": "decision"
            }
          }
        },
        "final_decision": {
          "type": "string|integer",
          "description": "Depends of the Table.matching_type could be as highest row in a table with all validations passed or sum of scoring points",
          "example": "Approve"
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/DecisionRule"
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "username": {
          "type": "string",
          "description": "Title of the matched rule or Table.default_title.",
          "example": "special_user"
        },
        "description": {
          "type": "string",
          "description": "Description of the matched rule or Table.default_description.",
          "example": "Some description"
        },
        "email": {
          "type": "string",
          "description": "User email",
          "example": "test@site.com"
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        },
        "access_tokens": {
          "type": "array",
          "description": "Array of access tokens.",
          "items": {
            "$ref": "#/definitions/AccessToken"
          }
        },
        "refresh_tokens": {
          "type": "array",
          "description": "Array of refresh tokens.",
          "items": {
            "$ref": "#/definitions/RefreshToken"
          }
        }
      }
    },
    "InvitationUser": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Invitation User. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "role": {
          "type": "string",
          "description": "Role of user into project",
          "example": "mananger"
        },
        "project": {
          "type": "object",
          "description": "Array of access tokens.",
          "properties": {
            "_id" : {
              "type": "string",
              "description": "Unique identifier representing a specific Project. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Project title",
              "example": "First project"
            }
          }
        },
        "scope": {
          "type": "array",
          "description": "Array of user scopes.",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string",
          "description": "User email",
          "example": "test@site.com"
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "AccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Unique access token for current user",
          "example": "2fc5a4e7a91771ca312c79e0ad2cc4c49d3b065d"
        },
        "expires_in": {
          "type": "integer",
          "description": "Token lifetime",
          "example": 360
        },
        "token_type": {
          "type": "string",
          "description": "Type of access token",
          "example": "Bearer"
        },
        "refresh_token": {
          "type": "string",
          "description": "Unique refresh token linked to current access token for current user",
          "example": "2fc5a4e7a91771ca312c79e0ad2cc4c49d3b065d"
        }
      }
    },
    "RefreshToken": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "refresh_token": {
          "type": "string",
          "description": "Unique refresh token linked to some access token for current user",
          "example": "8bcc30bf6ce74ddaf0ec5eff5a51141c7ba65ef9"
        },
        "client_id": {
          "type": "string",
          "description": "Client id for refresh token",
          "example": "test"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific project. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title for project",
          "example": "My first test project"
        },
        "users": {
          "type": "array",
          "description": "Array of project users.",
          "items": {
            "$ref": "#/definitions/ProjectUser"
          }
        },
        "consumers": {
          "type": "array",
          "description": "Array of project consumers.",
          "items": {
            "$ref": "#/definitions/Consumer"
          }
        }
      }
    },
    "ProjectUser": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific project user. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "user_id": {
          "type": "string",
          "description": "Unique identifier of a user",
          "example": "56c31536a60ad644060041af"
        },
        "role": {
          "type": "string",
          "description": "Role of user",
          "example": "admin"
        },
        "scope": {
          "type": "array",
          "description": "Array of user scopes.",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string",
          "description": "User nickname",
          "example": "user123"
        },
        "email": {
          "type": "string",
          "description": "User email",
          "example": "test@mail.com"
        }
      }
    },
    "UserInList": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific project user. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "username": {
          "type": "string",
          "description": "User nickname",
          "example": "user123"
        }
      }
    },
    "Paging": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "description": "",
          "example": 15
        },
        "total": {
          "type": "integer",
          "description": "",
          "example": 40
        },
        "current_page": {
          "type": "integer",
          "description": "",
          "example": 1
        },
        "last_page": {
          "type": "integer",
          "description": "",
          "example": 3
        }
      }
    },
    "Consumer": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific project user. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "client_id": {
          "type": "string",
          "description": "Client id",
          "example": "fe5fe8d15bb7a6a0daef36d2843c547c6d594b0c"
        },
        "client_secret": {
          "type": "string",
          "description": "Client secret",
          "example": "a7c70da3246a436bde66101d65741f9adf570726"
        },
        "description": {
          "type": "string",
          "description": "Optional description of client",
          "example": "Description of project"
        },
        "scope": {
          "type": "array",
          "description": "Array of client scopes.",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
